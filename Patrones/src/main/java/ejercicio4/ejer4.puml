@startuml
class ToDoItem << Context >>{
-name:String
-comentarios:List<String>
-startDate: LocalDate
-finishDate: LocalDate
+start()
+tooglePause()
+finish()
+workedTime():Duration
+addComment(comment:String)
+setState(estado:State)
}
ToDoItem --> State : -state
interface State << State >>{
+start(item:ToDoItem)
+tooglePause()
+finish(item:ToDoItem)
+workedTime(item:ToDoItem):Duration
+addComment(item:ToDoItem,comment:String)
}

class StatePending << ConcreteState >> implements State{
+start(item:ToDoItem)
+tooglePause()
+finish(item:ToDoItem)
+workedTime(item:ToDoItem):Duration
+addComment(item:ToDoItem,comment:String)
}

class StateInProgress << ConcreteState >> implements State{
+start(item:ToDoItem)
+tooglePause()
+finish(item:ToDoItem)
+workedTime(item:ToDoItem):Duration
+addComment(item:ToDoItem,comment:String)
}

class StatePaused << ConcreteState >> implements State {
+start(item:ToDoItem)
+tooglePause()
+finish(item:ToDoItem)
+workedTime(item:ToDoItem):Duration
+addComment(item:ToDoItem,comment:String)
}

class StateFinished << ConcreteState >> implements State{
+start(item:ToDoItem)
+tooglePause()
+finish(item:ToDoItem)
+workedTime(item:ToDoItem):Duration
+addComment(item:ToDoItem,comment:String)
}
@enduml